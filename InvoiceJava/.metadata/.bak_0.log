!SESSION 2022-09-14 08:51:33.355 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file C:\Users\sarik\Desktop\my E Rank Project\InvoiceJava\.metadata\.bak_0.log
Created Time: 2022-09-14 14:58:46.818

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 14:58:46.819
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.GdDjLBZA => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 14:58:46.851
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 14:58:46.856
!MESSAGE buffering callback sts4.classpath.GdDjLBZA Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 14:58:46.858
!MESSAGE executing callback sts4.classpath.GdDjLBZA 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 14:58:47.242
!MESSAGE executing callback sts4.classpath.GdDjLBZA SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:04:59.891
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.GdDjLBZA

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:04:59.891
!MESSAGE unsubscribing from classpath changes: sts4.classpath.GdDjLBZA

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:04:59.892
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:04:59.892
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.GdDjLBZA => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:09.183
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:09.184
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@60d1fc7a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:09.185
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.028
!MESSAGE Boot LS startup time from start to initialized: 1841ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.105
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.giJAZavKisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.106
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.107
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.107
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.108
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.108
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.giJAZavK => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.113
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.117
!MESSAGE buffering callback sts4.classpath.giJAZavK Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.118
!MESSAGE executing callback sts4.classpath.giJAZavK 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 15:05:11.416
!MESSAGE executing callback sts4.classpath.giJAZavK SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:01.064
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.giJAZavK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:01.066
!MESSAGE unsubscribing from classpath changes: sts4.classpath.giJAZavK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:01.067
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:01.067
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.giJAZavK => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:05.381
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:05.381
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@60d1fc7a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:05.382
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.297
!MESSAGE Boot LS startup time from start to initialized: 1911ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.385
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hUmdEyLNisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.386
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.387
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.387
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.388
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.388
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hUmdEyLN => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.394
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.399
!MESSAGE buffering callback sts4.classpath.hUmdEyLN Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.400
!MESSAGE executing callback sts4.classpath.hUmdEyLN 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:05:07.730
!MESSAGE executing callback sts4.classpath.hUmdEyLN SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:37.230
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hUmdEyLN

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:37.231
!MESSAGE unsubscribing from classpath changes: sts4.classpath.hUmdEyLN

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:37.232
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:37.232
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hUmdEyLN => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:42.212
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:42.213
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@60d1fc7a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:42.213
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:43.995
!MESSAGE Boot LS startup time from start to initialized: 1779ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.064
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.gsHrVAPAisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.065
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.065
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.066
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.066
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.067
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.gsHrVAPA => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.071
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.076
!MESSAGE buffering callback sts4.classpath.gsHrVAPA Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.076
!MESSAGE executing callback sts4.classpath.gsHrVAPA 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 16:23:44.390
!MESSAGE executing callback sts4.classpath.gsHrVAPA SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:11.988
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.gsHrVAPA

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:11.994
!MESSAGE unsubscribing from classpath changes: sts4.classpath.gsHrVAPA

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:11.994
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:11.995
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.gsHrVAPA => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:28.359
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:28.360
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@60d1fc7a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:28.365
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.eclipse.lsp4e 2 0 2022-09-14 17:29:30.404
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.789
!MESSAGE Boot LS startup time from start to initialized: 2420ms

!ENTRY org.eclipse.lsp4e 4 0 2022-09-14 17:29:30.856
!MESSAGE org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
!STACK 0
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.lambda$12(LSPTextHover.java:199)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.lambda$11(LSPTextHover.java:208)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture$Completion.exec(CompletableFuture.java:483)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponse(RemoteEndpoint.java:209)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:193)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$4(LanguageServerWrapper.java:260)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.888
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.eavXrChhisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.889
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.890
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.891
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.891
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.892
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.eavXrChh => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.973
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.978
!MESSAGE buffering callback sts4.classpath.eavXrChh Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:30.979
!MESSAGE executing callback sts4.classpath.eavXrChh 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 17:29:31.338
!MESSAGE executing callback sts4.classpath.eavXrChh SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 20:35:43.256
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.eavXrChh

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 20:35:43.259
!MESSAGE unsubscribing from classpath changes: sts4.classpath.eavXrChh

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 20:35:43.260
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-14 20:35:43.260
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.eavXrChh => OK
!SESSION 2022-09-15 08:58:59.745 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-15 08:59:51.230
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-15 08:59:51.230
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@27575bcd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@21ed4a51,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-15 08:59:51.230
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@13866865,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4891d727,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 08:59:53.927
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 08:59:53.928
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@2cef3d96[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 08:59:53.938
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 08:59:54.140
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-15 08:59:58.582
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.lsp4e 2 0 2022-09-15 08:59:59.211
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.297
!MESSAGE Boot LS startup time from start to initialized: 7313ms

!ENTRY org.eclipse.lsp4e 4 0 2022-09-15 09:00:01.936
!MESSAGE org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
!STACK 0
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.lambda$12(LSPTextHover.java:199)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.lambda$11(LSPTextHover.java:208)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture$Completion.exec(CompletableFuture.java:483)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponse(RemoteEndpoint.java:209)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:193)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$4(LanguageServerWrapper.java:260)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.942
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.bbhTNWkhisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.946
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.948
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.949
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.950
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.950
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.bbhTNWkh => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.981
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.986
!MESSAGE buffering callback sts4.classpath.bbhTNWkh Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:01.986
!MESSAGE executing callback sts4.classpath.bbhTNWkh 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 09:00:02.346
!MESSAGE executing callback sts4.classpath.bbhTNWkh SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-15 09:00:09.332
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-15 10:11:14.593
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-15 16:02:29.955
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 20:47:16.331
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.bbhTNWkh

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 20:47:16.332
!MESSAGE unsubscribing from classpath changes: sts4.classpath.bbhTNWkh

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 20:47:16.333
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-15 20:47:16.334
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.bbhTNWkh => OK
!SESSION 2022-09-16 06:34:55.110 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-16 06:35:13.256
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-16 06:35:13.256
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4edde05c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2911db81,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-16 06:35:13.256
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7fce1069,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@51b41740,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:16.069
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:16.070
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@4fbf5bbb[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:16.082
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:16.373
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-16 06:35:21.369
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.lsp4e 2 0 2022-09-16 06:35:21.899
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:22.397
!MESSAGE Boot LS startup time from start to initialized: 6274ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.704
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.MwgkvCcIisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.708
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.712
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.713
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.714
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.714
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.MwgkvCcI => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.748
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.753
!MESSAGE buffering callback sts4.classpath.MwgkvCcI Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:23.754
!MESSAGE executing callback sts4.classpath.MwgkvCcI 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 06:35:24.464
!MESSAGE executing callback sts4.classpath.MwgkvCcI SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-16 06:35:43.734
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:49.174
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:22:49.176
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:22:49.177
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:50.214
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:22:50.217
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:22:50.218
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:50.257
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:50.259
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:50.261
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:50.632
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:50.633
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:50.634
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:53.931
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:53.934
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:53.934
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:54.258
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:54.259
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:54.260
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:58.098
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:58.099
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:58.099
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:58.290
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:22:58.292
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:22:58.292
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:22:59.253
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:22:59.254
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:22:59.255
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:00.300
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:23:00.301
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:23:00.302
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:00.338
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:00.339
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:00.340
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:01.078
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:01.079
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:01.080
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:07.488
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:07.490
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:07.491
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:09.857
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:23:09.859
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:23:09.859
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:09.905
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:09.906
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:09.907
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:12.886
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-16 12:23:12.887
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-16 12:23:12.888
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:12.926
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:12.927
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:12.927
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:13.969
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:13.971
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:13.971
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-16 12:23:14.251
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Handler.WeekdaysTimingsHybRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private WeekdaysTimingsHybRepo weekdaysTimingsHybRepo ;
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorAvailability) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorAvailabilityRepo.save(doctorAvailability);
	}
	
	public List<DoctorDetails> get() {
		return doctorAvailabilityRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorAvailabilityRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimingsHybRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorAvailabilityRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = weekdaysTimingsHybRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorFirstName(doctorAvailabilityData.get(f).getDoctorFirstName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setDoctorLastName(doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       weekSlots.setSlotsList(weekTimeSlotsOptions);
	    		                                      weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
	    		                                      weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
	    		                                      weekSlots.setListMap(hash_map);
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                     weekSlots.setListListSlots2(listListSlots2);
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			weekdaysTimingsHybRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImage(doctor.getImage());
		"data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()))
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-09-16 12:23:14.253
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-09-16 12:23:14.253
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-16 13:59:22.758
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface 2 0 2022-09-16 15:48:45.526
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-16 15:48:45.526
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.togglelinecommentcommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@47e2a865,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7cc909e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-16 17:13:15.059
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 19:30:28.597
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.MwgkvCcI

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 19:30:28.599
!MESSAGE unsubscribing from classpath changes: sts4.classpath.MwgkvCcI

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 19:30:28.599
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-16 19:30:28.600
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.MwgkvCcI => OK
!SESSION 2022-09-17 09:52:24.514 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-17 09:52:45.571
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-17 09:52:45.571
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2648aa1b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4a3333be,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-17 09:52:45.571
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@13b4ee4e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4f55a864,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:52:53.842
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:52:53.842
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@3c4acd9a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:52:53.858
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:52:54.153
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-17 09:52:55.752
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:01.504
!MESSAGE Boot LS startup time from start to initialized: 7640ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.121
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.tMkmqqOUisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.125
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.129
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.130
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.131
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.132
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.tMkmqqOU => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.167
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.171
!MESSAGE buffering callback sts4.classpath.tMkmqqOU Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:02.172
!MESSAGE executing callback sts4.classpath.tMkmqqOU 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 09:53:03.254
!MESSAGE executing callback sts4.classpath.tMkmqqOU SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-17 09:53:16.533
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-17 09:57:35.027
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-17 12:59:13.988
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-17 14:46:19.175
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-17 16:45:49.386
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 18:54:49.518
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.tMkmqqOU

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 18:54:49.520
!MESSAGE unsubscribing from classpath changes: sts4.classpath.tMkmqqOU

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 18:54:49.521
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-17 18:54:49.522
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.tMkmqqOU => OK
!SESSION 2022-09-19 09:06:18.004 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-19 09:06:41.800
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-19 09:06:41.800
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4edde05c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2911db81,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-19 09:06:41.800
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7fce1069,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@51b41740,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:44.212
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:44.213
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@54fef06a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:44.225
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:44.564
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:49.631
!MESSAGE Boot LS startup time from start to initialized: 5356ms

!ENTRY org.eclipse.egit.ui 2 0 2022-09-19 09:06:49.766
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.085
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.SQmPFzZwisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.090
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.094
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.095
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.096
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.097
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.SQmPFzZw => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.136
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.142
!MESSAGE buffering callback sts4.classpath.SQmPFzZw Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:51.144
!MESSAGE executing callback sts4.classpath.SQmPFzZw 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 09:06:52.615
!MESSAGE executing callback sts4.classpath.SQmPFzZw SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-19 09:07:09.318
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-19 09:15:46.005
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 2 2022-09-19 09:38:03.049
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2327)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5003)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1262)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1316)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7147)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3833)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3846)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-19 09:38:03.052
!MESSAGE Exception occurred in listener of Java element change notification
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2327)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5003)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1262)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1316)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7147)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3833)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3846)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-19 09:38:22.088
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-19 12:03:10.680
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-19 17:32:40.996
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 17:43:15.100
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.SQmPFzZw

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 17:43:15.102
!MESSAGE unsubscribing from classpath changes: sts4.classpath.SQmPFzZw

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 17:43:15.103
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-19 17:43:15.103
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.SQmPFzZw => OK
!SESSION 2022-09-22 10:11:21.459 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-22 10:11:42.902
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-22 10:11:42.902
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2fc435e9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@bf18412,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-22 10:11:42.902
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5da2966,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@52c27d53,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:45.908
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:45.909
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@6affd244[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:45.919
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:46.200
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-22 10:11:51.344
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:51.783
!MESSAGE Boot LS startup time from start to initialized: 5829ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.127
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.qdLxRZeSisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.133
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.137
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.139
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.139
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.140
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.qdLxRZeS => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.176
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.183
!MESSAGE buffering callback sts4.classpath.qdLxRZeS Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:53.184
!MESSAGE executing callback sts4.classpath.qdLxRZeS 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:11:54.304
!MESSAGE executing callback sts4.classpath.qdLxRZeS SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-22 10:12:02.769
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:36:52.465
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.qdLxRZeS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:36:52.468
!MESSAGE unsubscribing from classpath changes: sts4.classpath.qdLxRZeS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:36:52.468
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:36:52.469
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.qdLxRZeS => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:13.554
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:13.555
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@6affd244[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:13.556
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.885
!MESSAGE Boot LS startup time from start to initialized: 6327ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.986
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JhjYIrrZisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.987
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.988
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.989
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.989
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:19.989
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JhjYIrrZ => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:20.034
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:20.038
!MESSAGE buffering callback sts4.classpath.JhjYIrrZ Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:20.039
!MESSAGE executing callback sts4.classpath.JhjYIrrZ 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 10:38:22.042
!MESSAGE executing callback sts4.classpath.JhjYIrrZ FAILED

!ENTRY org.springframework.tooling.ls.eclipse.commons 4 0 2022-09-22 10:38:22.043
!MESSAGE 
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.springframework.tooling.ls.eclipse.commons.LSP4ECommandExecutor.executeClientCommand(LSP4ECommandExecutor.java:37)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.flush(SendClasspathNotificationsJob.java:178)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.run(SendClasspathNotificationsJob.java:149)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jface 2 0 2022-09-22 10:59:55.917
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-22 10:59:55.917
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.togglelinecommentcommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@49b4b5fc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@70e4f6af,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:05:27.464
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JhjYIrrZ

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:05:27.465
!MESSAGE unsubscribing from classpath changes: sts4.classpath.JhjYIrrZ

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:05:27.465
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:05:27.466
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JhjYIrrZ => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:08.364
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:08.366
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@6affd244[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:08.367
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.553
!MESSAGE Boot LS startup time from start to initialized: 2183ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.657
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.QUSWYLioisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.658
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.658
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.659
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.660
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.660
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.QUSWYLio => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.667
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.675
!MESSAGE buffering callback sts4.classpath.QUSWYLio Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:10.676
!MESSAGE executing callback sts4.classpath.QUSWYLio 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 11:43:11.062
!MESSAGE executing callback sts4.classpath.QUSWYLio SUCCESS [done]

!ENTRY org.eclipse.lsp4e 2 0 2022-09-22 11:43:26.093
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-22 12:20:42.058
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-22 12:26:02.953
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-22 12:27:17.891
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 20:25:45.852
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.QUSWYLio

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 20:25:45.857
!MESSAGE unsubscribing from classpath changes: sts4.classpath.QUSWYLio

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 20:25:45.858
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-22 20:25:45.859
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.QUSWYLio => OK
!SESSION 2022-09-23 07:35:49.545 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-23 07:36:18.525
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-23 07:36:18.525
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@35d3202b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2dfd157b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-23 07:36:18.525
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@64381526,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@46290193,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:21.581
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:21.589
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@2f68caf3[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:21.597
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:21.918
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-23 07:36:27.297
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:27.759
!MESSAGE Boot LS startup time from start to initialized: 6126ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.973
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.ATDEKvWgisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.978
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.982
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.983
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.984
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:28.985
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.ATDEKvWg => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:29.024
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:29.029
!MESSAGE buffering callback sts4.classpath.ATDEKvWg Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:29.031
!MESSAGE executing callback sts4.classpath.ATDEKvWg 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 07:36:29.447
!MESSAGE executing callback sts4.classpath.ATDEKvWg SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-23 07:36:39.780
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 08:10:41.554
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 08:21:14.129
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 09:32:52.440
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 09:51:32.446
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 10:31:15.145
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 10:40:05.149
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 11:12:11.173
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 11:55:42.470
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 11:59:34.621
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 12:13:30.204
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 12:25:57.104
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 12:45:18.882
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 12:59:26.763
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 13:33:00.897
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 14:26:56.441
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 14:29:21.266
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 14:35:34.588
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface 2 0 2022-09-23 16:38:10.098
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-23 16:38:10.098
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.togglelinecommentcommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@32525aef,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@8ace99,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 17:29:57.272
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 17:31:45.581
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-23 17:31:58.471
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 20:32:11.549
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.ATDEKvWg

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 20:32:11.551
!MESSAGE unsubscribing from classpath changes: sts4.classpath.ATDEKvWg

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 20:32:11.551
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-23 20:32:11.552
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.ATDEKvWg => OK
!SESSION 2022-09-24 08:49:06.125 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-24 08:49:28.838
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-24 08:49:28.838
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@70cac22a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57a0c261,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-24 08:49:28.838
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5862dda4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@299ddfff,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:32.203
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:32.204
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@74a47688[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:32.215
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:32.506
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-24 08:49:37.378
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:37.786
!MESSAGE Boot LS startup time from start to initialized: 5535ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:38.991
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.ZpBjaqLbisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:38.996
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:38.999
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.000
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.001
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.002
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.ZpBjaqLb => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.037
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.043
!MESSAGE buffering callback sts4.classpath.ZpBjaqLb Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:39.044
!MESSAGE executing callback sts4.classpath.ZpBjaqLb 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 08:49:41.053
!MESSAGE executing callback sts4.classpath.ZpBjaqLb FAILED

!ENTRY org.springframework.tooling.ls.eclipse.commons 4 0 2022-09-24 08:49:41.054
!MESSAGE 
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.springframework.tooling.ls.eclipse.commons.LSP4ECommandExecutor.executeClientCommand(LSP4ECommandExecutor.java:37)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.flush(SendClasspathNotificationsJob.java:178)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.run(SendClasspathNotificationsJob.java:149)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 08:54:17.264
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 08:57:48.873
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 2 2022-09-24 08:58:15.528
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2327)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5003)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1262)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1316)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7147)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3833)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3846)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 08:58:15.530
!MESSAGE Exception occurred in listener of Java element change notification
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2327)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5003)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1262)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1316)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7147)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2345)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2343)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3833)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3846)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 2 2022-09-24 09:27:20.036
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:175)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:251)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 09:27:20.037
!MESSAGE Exception occurred in listener of Java element change notification
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1503)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:175)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:251)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.ui 2 2 2022-09-24 09:37:09.426
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.jdt.core 4 2 2022-09-24 09:37:32.138
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.checkpoint(Workspace.java:576)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.lambda$0(PerformChangeOperation.java:253)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:295)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:94)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:219)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:89)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:122)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 09:37:32.139
!MESSAGE Exception occurred in listener of Java element change notification
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.resources.IResourceDelta.getKind()" because "resourceDelta" is null
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:773)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.handleAffectedChildren(PackageExplorerContentProvider.java:815)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.processDelta(PackageExplorerContentProvider.java:758)
	at org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.elementChanged(PackageExplorerContentProvider.java:139)
	at org.eclipse.jdt.internal.core.DeltaProcessor$3.run(DeltaProcessor.java:1755)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyListeners(DeltaProcessor.java:1743)
	at org.eclipse.jdt.internal.core.DeltaProcessor.firePostChangeDelta(DeltaProcessor.java:1576)
	at org.eclipse.jdt.internal.core.DeltaProcessor.fire(DeltaProcessor.java:1552)
	at org.eclipse.jdt.internal.core.DeltaProcessor.notifyAndFire(DeltaProcessor.java:2273)
	at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2163)
	at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:501)
	at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:305)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:295)
	at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:158)
	at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:381)
	at org.eclipse.core.internal.resources.Workspace.checkpoint(Workspace.java:576)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.lambda$0(PerformChangeOperation.java:253)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:295)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:94)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:219)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2338)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:89)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:122)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 09:39:41.842
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 09:39:46.943
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 09:47:26.275
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 09:48:55.795
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 10:20:07.953
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 11:27:22.326
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 11:54:54.046
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:09.904
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.ZpBjaqLb

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:09.905
!MESSAGE unsubscribing from classpath changes: sts4.classpath.ZpBjaqLb

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:09.906
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:09.907
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.ZpBjaqLb => OK
!SESSION 2022-09-24 12:07:14.670 -----------------------------------------------
eclipse.buildId=4.13.0.202112031748
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.jface 2 0 2022-09-24 12:07:42.036
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-24 12:07:42.036
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3fb1948c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7c39193f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-09-24 12:07:42.036
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@230d013b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e225c34,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:47.611
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:47.611
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@3c4acd9a[org.springframework.tooling.boot.ls:1.29.0.202112031705(id=564)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:47.620
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:47.779
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.egit.ui 2 0 2022-09-24 12:07:49.181
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\sarik'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:53.670
!MESSAGE Boot LS startup time from start to initialized: 6041ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.284
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.wCzzYHbSisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.288
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.290
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.291
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.291
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.292
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.wCzzYHbS => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.307
!MESSAGE classpath=105 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.312
!MESSAGE buffering callback sts4.classpath.wCzzYHbS Invoice false 105

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.313
!MESSAGE executing callback sts4.classpath.wCzzYHbS 1 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-09-24 12:07:54.656
!MESSAGE executing callback sts4.classpath.wCzzYHbS SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-09-24 12:08:29.728
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 12:14:35.613
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 12:14:40.226
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:38:19.441
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:38:52.338
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:43:07.404
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:43:10.428
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:44:22.307
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:47:43.842
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:47:53.130
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:47:54.934
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 14:49:21.318
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 15:26:48.098
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 16:22:18.578
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-09-24 16:22:31.494
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 16:48:43.521
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.BranchDoctorRepo;
import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorDetailsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Branch;
import InvoiceOrg.Invoice.Models.BranchDoctor;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.ChartOfAccountsDto;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;
import net.bytebuddy.asm.Advice.This;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	@Autowired
	private BranchDoctorRepo branchDoctorRepo;
	

	@Autowired
    private DoctorDetailsRepo doctorDetailsRepo;
	
	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorDetails) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorDetailsRepo.save(doctorDetails);
	}
	
	public List<DoctorDetails> get() {
		return doctorDetailsRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		
		
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		doctorAvailability.setBranch_id( doctorAvailabilityDto.getBranchId()   );
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
		
		BranchDoctor  branchDoctor = new BranchDoctor();
		branchDoctor.setBranchId(doctorAvailabilityDto.getBranchId());
		branchDoctor.setDoctorId(doctorAvailabilityDto.getDoctorId());
		System.out.println(branchDoctor.getBranchId() +"-"+branchDoctor.getDoctorId());
		branchDoctorRepo.save(branchDoctor);
		
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorDetailsRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimings.setBranchId(doctorAvailabilityDto.getBranchId());
						doctorAvailabilityRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorDetailsRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
	
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		
		//List<DoctorDepartments>  docsList = maindocsList.subList(i, i+7);
			
//		
//		  List<String> evenIndexedNames = IntStream
//			      .range(0, maindocsList.size())
//			      .filter(i -> i % 2 == 0)
//			      .map(i -> names[i])
//			      .collect(Collectors.toList());
//		  
//		  
//		  List<DoctorDepartments>  docsList = IntStream.iterate(maindocsList.size() - 2, i -> i - 1)
//	    	        .limit(maindocsList.size() - 1) //or better .takeWhile(i -> i >= 0) on Java 9+
//	    	        .filter(i -> 29 == maindocsList.get(i).getDepartmentId())
//	    	        .mapToObj(i -> maindocsList[i] )
//	    	        .map(maindocsList::get)
//	    	        .orElse(null);

//		
//		String[] names = {"Sam", "Pamela", "Dave", "Pascal", "Erik"};
//		IntStream.range(0, maindocsList.size())
//		         .filter(i -> maindocsList[i].length() <= i)
//		         .mapToObj(this::readCSVLines)
//		         .collect(Collectors.toCollection(ArrayList::new));
		
		
//	              IntStream.range(1, doctorAvailabilityDtoList.size())
//				     .limit(doctorAvailabilityDtoList.size() - 1)
//		    		.filter(i -> 1 == doctorAvailabilityDtoList.get(i).getBranchId())
//		            .mapToObj(suit -> new DoctorDepartments())
//		            .collect(Collectors.toCollection(ArrayList::new));
		
	    	          
		
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			
			
			
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		//i = i+7;
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdAllBranchsSlots(int departmentId){
		
		List<WeekSlots> weekSlotsList = new ArrayList<WeekSlots>();
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		System.out.println(departmentId);
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getTimingsByDepId(departmentId);
		
//		List<DoctorAvailability> newList =   IntStream.range(0, avList.size())
//		     .limit(avList.size() - 1)
//  		.filter(i -> 1 == avList.get(i).getBranchId())
//          .mapToObj(suit -> avList.get(suit))
//          .collect(Collectors.toList());
		List<DoctorAvailability>>
		int i = 0;
		
		  while(i < avList.size()) {
		   List<DoctorAvailability> newList =  avList.stream()  
                                               .filter(p -> p.getBranchId() == avList.get(i).getBranchId())
		                                       .collect(Collectors.toList());
		     i = i+newList.size();
		  }
		  
		   
		   
//		   List <ChartOfAccountsDto> filertedchartList = new ArrayList<ChartOfAccountsDto>();
//			//List<Double> totalList = new ArrayList<Double>();
//			
//			 filertedchartList = chartList.stream()
//				      .filter(chart -> chart.getAccount_type().equals(type))
//				      .collect(Collectors.toList());
		
		
		
		

		System.out.println(newList.size());
		for(DoctorAvailability doctorAvailability  : newList) {
			System.out.println(doctorAvailability.getScheduleDay());
		}
		
		
		 
		return weekSlotsList;
		
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = doctorAvailabilityRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorName(doctorAvailabilityData.get(f).getDoctorFirstName() +" "+doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       
												   // not using
												//   weekSlots.setSlotsList(weekTimeSlotsOptions);
												   //   weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
												   //   weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
												   //   weekSlots.setListMap(hash_map);
												   // weekSlots.setListListSlots2(listListSlots2);
	    		                                       
	    		                                       
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                  
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			doctorAvailabilityRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImageStng("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage())); 
		
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-24 16:48:43.526
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-24 16:48:43.527
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 16:48:44.570
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.BranchDoctorRepo;
import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorDetailsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Branch;
import InvoiceOrg.Invoice.Models.BranchDoctor;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.ChartOfAccountsDto;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;
import net.bytebuddy.asm.Advice.This;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	@Autowired
	private BranchDoctorRepo branchDoctorRepo;
	

	@Autowired
    private DoctorDetailsRepo doctorDetailsRepo;
	
	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorDetails) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorDetailsRepo.save(doctorDetails);
	}
	
	public List<DoctorDetails> get() {
		return doctorDetailsRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		
		
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		doctorAvailability.setBranch_id( doctorAvailabilityDto.getBranchId()   );
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
		
		BranchDoctor  branchDoctor = new BranchDoctor();
		branchDoctor.setBranchId(doctorAvailabilityDto.getBranchId());
		branchDoctor.setDoctorId(doctorAvailabilityDto.getDoctorId());
		System.out.println(branchDoctor.getBranchId() +"-"+branchDoctor.getDoctorId());
		branchDoctorRepo.save(branchDoctor);
		
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorDetailsRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimings.setBranchId(doctorAvailabilityDto.getBranchId());
						doctorAvailabilityRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorDetailsRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
	
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		
		//List<DoctorDepartments>  docsList = maindocsList.subList(i, i+7);
			
//		
//		  List<String> evenIndexedNames = IntStream
//			      .range(0, maindocsList.size())
//			      .filter(i -> i % 2 == 0)
//			      .map(i -> names[i])
//			      .collect(Collectors.toList());
//		  
//		  
//		  List<DoctorDepartments>  docsList = IntStream.iterate(maindocsList.size() - 2, i -> i - 1)
//	    	        .limit(maindocsList.size() - 1) //or better .takeWhile(i -> i >= 0) on Java 9+
//	    	        .filter(i -> 29 == maindocsList.get(i).getDepartmentId())
//	    	        .mapToObj(i -> maindocsList[i] )
//	    	        .map(maindocsList::get)
//	    	        .orElse(null);

//		
//		String[] names = {"Sam", "Pamela", "Dave", "Pascal", "Erik"};
//		IntStream.range(0, maindocsList.size())
//		         .filter(i -> maindocsList[i].length() <= i)
//		         .mapToObj(this::readCSVLines)
//		         .collect(Collectors.toCollection(ArrayList::new));
		
		
//	              IntStream.range(1, doctorAvailabilityDtoList.size())
//				     .limit(doctorAvailabilityDtoList.size() - 1)
//		    		.filter(i -> 1 == doctorAvailabilityDtoList.get(i).getBranchId())
//		            .mapToObj(suit -> new DoctorDepartments())
//		            .collect(Collectors.toCollection(ArrayList::new));
		
	    	          
		
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			
			
			
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		//i = i+7;
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdAllBranchsSlots(int departmentId){
		
		List<WeekSlots> weekSlotsList = new ArrayList<WeekSlots>();
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		System.out.println(departmentId);
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getTimingsByDepId(departmentId);
		
//		List<DoctorAvailability> newList =   IntStream.range(0, avList.size())
//		     .limit(avList.size() - 1)
//  		.filter(i -> 1 == avList.get(i).getBranchId())
//          .mapToObj(suit -> avList.get(suit))
//          .collect(Collectors.toList());
		List<DoctorAvailability>>
		int i = 0;
		
		  while(i < avList.size()) {
		   List<DoctorAvailability> newList =  avList.stream()  
                                               .filter(p -> p.getBranchId() == avList.get(i).getBranchId())
		                                       .collect(Collectors.toList());
		     i = i+newList.size();
		  }
		  
		   
		   
//		   List <ChartOfAccountsDto> filertedchartList = new ArrayList<ChartOfAccountsDto>();
//			//List<Double> totalList = new ArrayList<Double>();
//			
//			 filertedchartList = chartList.stream()
//				      .filter(chart -> chart.getAccount_type().equals(type))
//				      .collect(Collectors.toList());
		
		
		
		

		System.out.println(newList.size());
		for(DoctorAvailability doctorAvailability  : newList) {
			System.out.println(doctorAvailability.getScheduleDay());
		}
		
		
		 
		return weekSlotsList;
		
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = doctorAvailabilityRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorName(doctorAvailabilityData.get(f).getDoctorFirstName() +" "+doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       
												   // not using
												//   weekSlots.setSlotsList(weekTimeSlotsOptions);
												   //   weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
												   //   weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
												   //   weekSlots.setListMap(hash_map);
												   // weekSlots.setListListSlots2(listListSlots2);
	    		                                       
	    		                                       
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                  
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			doctorAvailabilityRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImageStng("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage())); 
		
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-09-24 16:48:44.571
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-09-24 16:48:44.572
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-09-24 16:48:45.362
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package InvoiceOrg.Invoice.Service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.BranchDoctorRepo;
import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorDetailsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Branch;
import InvoiceOrg.Invoice.Models.BranchDoctor;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.ChartOfAccountsDto;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;
import net.bytebuddy.asm.Advice.This;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	@Autowired
	private BranchDoctorRepo branchDoctorRepo;
	

	@Autowired
    private DoctorDetailsRepo doctorDetailsRepo;
	
	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	
	public DoctorDetails insert(DoctorDetails doctorDetails) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorDetailsRepo.save(doctorDetails);
	}
	
	public List<DoctorDetails> get() {
		return doctorDetailsRepo.findAll();
	}
	
	

	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		
		
		DoctorDetails doctorAvailability = new DoctorDetails();
		//doctorAvailability.setDepartmentId(doctorAvailabilityDto.getDepartmentId());
		doctorAvailability.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
		doctorAvailability.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
	//	doctorAvailability.setBusinessHours(doctorAvailabilityDto.getBusinessHours());
		doctorAvailability.setFromDate(doctorAvailabilityDto.getFromDate());
		doctorAvailability.setToDate(doctorAvailabilityDto.getToDate());
		
		//doctorAvailability.setService(doctorAvailabilityDto.getService());
		doctorAvailability.setId(doctorAvailabilityDto.getId());
		doctorAvailability.setDoctorId(doctorAvailabilityDto.getDoctorId());
		doctorAvailability.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
		doctorAvailability.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
		doctorAvailability.setBranch_id( doctorAvailabilityDto.getBranchId()   );
		System.out.println(doctorAvailability.getDoctorId());
		System.out.println(doctorAvailability.getConsultingFee());
		System.out.println(doctorAvailability.isVideoConsulting());
		System.out.println(doctorAvailability.getId());
		
		BranchDoctor  branchDoctor = new BranchDoctor();
		branchDoctor.setBranchId(doctorAvailabilityDto.getBranchId());
		branchDoctor.setDoctorId(doctorAvailabilityDto.getDoctorId());
		System.out.println(branchDoctor.getBranchId() +"-"+branchDoctor.getDoctorId());
		branchDoctorRepo.save(branchDoctor);
		
//		if(doctorAvailabilityDto.getId() > 0) {
		//	doctorAvailabilityRepo.edit(doctorAvailability.getConsultingDuration(),doctorAvailability.getDoctorId(),doctorAvailability.getConsultingFee(),doctorAvailability.getDepartmentId(),doctorAvailability.isVideoConsulting() , doctorAvailabilityDto.getId());
	            //@Param("service")String services , @Param("person")String person, @Param("fee")double fee, @Param("department")String department, @Param("video_consulting")boolean video_consulting , @Param("id")int id
//			prblem comments
			//	     List<DoctorAvailability> obj = doctorAvailabilityDto.getWeekdaysTimings();
//		for(DoctorAvailability weekdaysTimings : obj ) {
//			weekdaysTimings.setDoctorId(0);
//			weekdaysTimings.setType("service");
//			weekdaysTimingsHybRepo.edit(weekdaysTimings.getScheduleDay(),weekdaysTimings.isDoctorScheduleStatus()  ,weekdaysTimings.getScheduleStartTime(),weekdaysTimings.getScheduleEndTime(),weekdaysTimings.getType(),weekdaysTimings.getId());		
//		 }
		   
	//	}
	//else {
			 DoctorDetails servicesCls1 = doctorDetailsRepo.save(doctorAvailability);
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			    for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						//weekdaysTimings.setDoctorDetailsId(servicesCls1.getId());
						weekdaysTimings.setDoctorId(servicesCls1.getDoctorId());
						//weekdaysTimings.setDepartmentId(servicesCls1.getDepartmentId());
						//weekdaysTimings.setType("service");
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimings.setBranchId(doctorAvailabilityDto.getBranchId());
						doctorAvailabilityRepo.save(weekdaysTimings);		
					 } 
			    }
			    
						 
		//}
		return doctorAvailabilityDto    ;
	}
	
	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorDetailsRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			  System.out.println(weekdays[i]);
			  System.out.println(availabitityList.size());
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  week.setTimings(avList);
			  System.out.println(avList);
//			  for(DoctorAvailability doc : avList) {
//				  System.out.println(doc.getId()+" "+doc.getDoctorDetailsId()+"-----");
//			  }
			  DoctorAvailability doc = avList.get(0);
			  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			  week.setScheduleDay(weekdays[i]);
			  weekdaysTimings.add(week);
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	public List<WeekSlots> getDoctorsDetailsByDocIdSlots(int doctorId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorId);
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setVideoConsulting(service.isVideoConsulting()); 
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		
		
		//clsObj.setId(service.getId());
		
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
		//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<Week> getDoctorDetailsByDocId(DoctorAvailabilityDto doctorAvailability) {
		//  doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());   
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		
		return this.weekdaysSet(avList);
	}
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdSlots(int departmentId) {
	
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		
		//List<DoctorDepartments>  docsList = maindocsList.subList(i, i+7);
			
//		
//		  List<String> evenIndexedNames = IntStream
//			      .range(0, maindocsList.size())
//			      .filter(i -> i % 2 == 0)
//			      .map(i -> names[i])
//			      .collect(Collectors.toList());
//		  
//		  
//		  List<DoctorDepartments>  docsList = IntStream.iterate(maindocsList.size() - 2, i -> i - 1)
//	    	        .limit(maindocsList.size() - 1) //or better .takeWhile(i -> i >= 0) on Java 9+
//	    	        .filter(i -> 29 == maindocsList.get(i).getDepartmentId())
//	    	        .mapToObj(i -> maindocsList[i] )
//	    	        .map(maindocsList::get)
//	    	        .orElse(null);

//		
//		String[] names = {"Sam", "Pamela", "Dave", "Pascal", "Erik"};
//		IntStream.range(0, maindocsList.size())
//		         .filter(i -> maindocsList[i].length() <= i)
//		         .mapToObj(this::readCSVLines)
//		         .collect(Collectors.toCollection(ArrayList::new));
		
		
//	              IntStream.range(1, doctorAvailabilityDtoList.size())
//				     .limit(doctorAvailabilityDtoList.size() - 1)
//		    		.filter(i -> 1 == doctorAvailabilityDtoList.get(i).getBranchId())
//		            .mapToObj(suit -> new DoctorDepartments())
//		            .collect(Collectors.toCollection(ArrayList::new));
		
	    	          
		
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			System.out.println(doctorDepartments.getDoctorId()+ "doctorId");
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ; 
			System.out.println(doctor.getFirstName()+"doctor.getFirstName()");
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImage(doctor.getImage());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctor.getId()) );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			
			
			
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			doctorAvailabilityDtoList.add(clsObj);
		}
		//i = i+7;
		return setSlotsOptions(doctorAvailabilityDtoList,"seperate");
	}
	
	
	public List<WeekSlots> getAllDoctorsDetailsByDepIdAllBranchsSlots(int departmentId){
		
		List<WeekSlots> weekSlotsList = new ArrayList<WeekSlots>();
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		System.out.println(departmentId);
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getTimingsByDepId(departmentId);
		
//		List<DoctorAvailability> newList =   IntStream.range(0, avList.size())
//		     .limit(avList.size() - 1)
//  		.filter(i -> 1 == avList.get(i).getBranchId())
//          .mapToObj(suit -> avList.get(suit))
//          .collect(Collectors.toList());
		List<DoctorAvailability>>
		int i = 0;
		
		  while(i < avList.size()) {
		   List<DoctorAvailability> newList =  avList.stream()  
                                               .filter(p -> p.getBranchId() == avList.get(i).getBranchId())
		                                       .collect(Collectors.toList());
		     i = i+newList.size();
		  }
		  
		   
		   
//		   List <ChartOfAccountsDto> filertedchartList = new ArrayList<ChartOfAccountsDto>();
//			//List<Double> totalList = new ArrayList<Double>();
//			
//			 filertedchartList = chartList.stream()
//				      .filter(chart -> chart.getAccount_type().equals(type))
//				      .collect(Collectors.toList());
		
		
		
		

		System.out.println(newList.size());
		for(DoctorAvailability doctorAvailability  : newList) {
			System.out.println(doctorAvailability.getScheduleDay());
		}
		
		
		 
		return weekSlotsList;
		
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorDepartments.getDoctorId());
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			//clsObj.setDepartmentId(service.getDepartmentId());
			clsObj.setConsultingFee(service.getConsultingFee());
			clsObj.setFollowupFee(service.getFollowupFee());
			clsObj.setDoctorId(service.getDoctorId());
			clsObj.setConsultingDuration(service.getConsultingDuration());
			clsObj.setFromDate(service.getFromDate());
			clsObj.setToDate(service.getToDate());
			//clsObj.setService(service.getService());
			//clsObj.setQualification(physicianQualification.getQualification() );
			clsObj.setVideoConsulting(service.isVideoConsulting());
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
			clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
			doctorAvailabilityDtoList.add(clsObj);
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = doctorAvailabilityRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public List<WeekSlots> setSlotsOptions( List<DoctorAvailabilityDto> doctorAvailabilityData , String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                       for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  doctorAvailabilityData.get(f).getWeekdaysTimings();

	    		                                           double slotDuration =  doctorAvailabilityData.get(f).getConsultingDuration();
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
	    		                                       weekSlots.setConsultingDuration(doctorAvailabilityData.get(f).getConsultingDuration()); 
	    		                                       weekSlots.setVideoConsulting(doctorAvailabilityData.get(f).isVideoConsulting());
	    		                                       weekSlots.setDoctorName(doctorAvailabilityData.get(f).getDoctorFirstName() +" "+doctorAvailabilityData.get(f).getDoctorLastName());
	    		                                      // System.out.println(doctorAvailabilityData.get(f).getImage());
	    		                                       weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorAvailabilityData.get(f).getImage()));
	    		                                        weekSlots.setDoctorId(doctorAvailabilityData.get(f).getDoctorId());
	    		                                       weekSlots.setFromDate(doctorAvailabilityData.get(f).getFromDate());
	    		                                       weekSlots.setQualification(doctorAvailabilityData.get(f).getQualification());
	    		                                       
												   // not using
												//   weekSlots.setSlotsList(weekTimeSlotsOptions);
												   //   weekSlots.setEvnglotsList(evngweekTimeSlotsOptions);
												   //   weekSlots.setMrngslotsList(mrngweekTimeSlotsOptions);
												   //   weekSlots.setListMap(hash_map);
												   // weekSlots.setListListSlots2(listListSlots2);
	    		                                       
	    		                                       
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                  
	    		                                       weekSlots.setToDate(doctorAvailabilityData.get(f).getToDate());
	    		                                       weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorAvailabilityData.get(f).getDoctorId()));  

	    		                                       if(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()) != null){
	    		                                       weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorAvailabilityData.get(f).getDoctorId()));
	    		                                       }
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                      }
	     
	     
		return doctorTimeSolts;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			doctorAvailabilityRepo.deleteById(da.getId());
		}
		
	}
	
	public DoctorAvailabilityDto getDoctorDetailsByDoctorId(int doctorId){
		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		 
		Doctor doctor = doctorRepo.getById(doctorId) ;  
		clsObj.setDoctorFirstName(doctor.getFirstName());
		clsObj.setDoctorLastName(doctor.getLastName());
		clsObj.setImageStng("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage())); 
		
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId(doctorId);
		//clsObj.setDepartmentId(service.getDepartmentId());
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		
//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
//		clsObj.setDepartmentName(dep.getName());
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		
		return clsObj;
	}



}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
