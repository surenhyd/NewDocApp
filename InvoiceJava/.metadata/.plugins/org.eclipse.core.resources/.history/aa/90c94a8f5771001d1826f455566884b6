package InvoiceOrg.Invoice.Handler;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.dto.DoctorDetailsDtoInf;

@Repository
public interface DoctorDetailsRepo extends JpaRepository<DoctorDetails,Integer>{
	
	
	
	
	@Query(nativeQuery=true,value="select  \r\n"
			+ "		      details.id as detailsId,     details.consulting_fee as consultingFee, details.video_consulting as isVideoConsulting, details.consulting_duration as consultingDuration, details.followup_fee as followupFee, details.from_date as fromDate, details.to_date as toDate, details.branch_id as branchId,\r\n"
			+ "				   d.first_name as firstName, d.last_name as lastName, d.id as doctorId ,\r\n"
			+ "				   b.name as branchName\r\n"
			+ "					 from doctor_availability_details as details\r\n"
			+ "						 join doctor_departments as dep on  details.doctor_id =  dep.doctor_id\r\n"
			+ "						 join doctor as d on d.id= dep.doctor_id \r\n"
			+ "						 join branch as b on b.id = details.branch_id where department_id = :departmentId ")
    public List<DoctorDetailsDtoInf> getByDepartmentId(@Param("departmentId")int departmentId);
	
	@Modifying
	@Transactional
	@Query(nativeQuery=true,value="update doctor_details set consulting_duration=:consulting_duration,      doctor_id=:doctorId,                 consulting_fee=:consultingFee,               department_id=:department_id,                 video_consulting=:video_consulting                   where id=:id")
	public void edit(                                  @Param("consulting_duration")double consultingDuration,  @Param("doctorId")int doctorId, @Param("consultingFee")double consultingFee, @Param("department_id")int departmentId, @Param("video_consulting")boolean video_consulting , @Param("id")int id);


	@Query(nativeQuery=true,value="select * from  doctor_availability_details where      doctor_id=:doctor_id ")
	public List<DoctorDetails> getDoctorDetailsByDocId( @Param("doctor_id")int doctorId);
	
	@Query(nativeQuery=true,value="select \r\n"
			+ "			    d.id as doctorId, d.first_name as firstName, d.last_name as lastName, d.image, \r\n"
			+ "				ds.id as detailsId,  ds.consulting_fee as consultingFee, ds.followup_fee as followupFee, ds.consulting_duration as consultingDuration,\r\n"
			+ "			 ds.from_date as fromDate, ds.to_date as toDate, ds.video_consulting as isVideoConsulting\r\n"
			+ "						  from doctor as d\r\n"
			+ "						  join doctor_departments as dd on dd.doctor_id = d.id\r\n"
			+ "						  join doctor_availability_details as ds on ds.doctor_id = d.id where d.id = :doctorId")
	public List<DoctorDetailsDtoInf> getDoctorDetailsByDocId2( @Param("doctor_id")int doctorId);
	
	@Query(nativeQuery=true,value="select * from  doctor_availability_details where      doctor_id=:doctor_id and branch_id = :branch_id")
	public DoctorDetails getDoctorDetailsByDocIdBranchId( @Param("doctor_id")int doctorId,  @Param("branch_id")int branchId);
	
	
	@Query(nativeQuery=true,value="select \r\n"
			+ "			    d.id as doctorId, d.first_name as firstName, d.last_name as lastName, d.image, \r\n"
			+ "				ds.id as detailsId,  ds.consulting_fee as consultingFee, ds.followup_fee as followupFee, ds.consulting_duration as consultingDuration,\r\n"
			+ "			 ds.from_date as fromDate, ds.to_date as toDate, ds.video_consulting as isVideoConsulting\r\n"
			+ "						  from doctor as d\r\n"
			+ "						  join doctor_departments as dd on dd.doctor_id = d.id\r\n"
			+ "						  join doctor_availability_details as ds on ds.doctor_id = d.id where dd.department_id = :departmentId and \r\n"
			+ "						  ds.branch_id = :branchId")
    public List<DoctorDetailsDtoInf> getAllDoctorsDetailsByDepIdBranchIdSlots(@Param("departmentId")int departmentId , @Param("branchId")int branchId);
	
	public DoctorDetails findByDoctorId(@Param("doctor_id")int doctorId);

}
