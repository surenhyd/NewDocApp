package InvoiceOrg.Invoice.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import InvoiceOrg.Invoice.Handler.BranchDoctorRepo;
import InvoiceOrg.Invoice.Handler.BranchRepo;
import InvoiceOrg.Invoice.Handler.DateRangesRepo;
import InvoiceOrg.Invoice.Handler.DepartmentsHybRepo;
import InvoiceOrg.Invoice.Handler.DoctorAvailabilityRepo;
import InvoiceOrg.Invoice.Handler.DoctorDepartmentsRepo;
import InvoiceOrg.Invoice.Handler.DoctorDetailsRepo;
import InvoiceOrg.Invoice.Handler.DoctorRepo;
import InvoiceOrg.Invoice.Handler.ReviewsRepo;
import InvoiceOrg.Invoice.Handler.DoctorQualificationRepo;
import InvoiceOrg.Invoice.Models.Doctor;
import InvoiceOrg.Invoice.Models.BalanceSheetType;
import InvoiceOrg.Invoice.Models.Branch;
import InvoiceOrg.Invoice.Models.BranchDoctor;
import InvoiceOrg.Invoice.Models.DateRanges;
import InvoiceOrg.Invoice.Models.Departments;
import InvoiceOrg.Invoice.Models.DoctorDetails;
import InvoiceOrg.Invoice.Models.DoctorSpecialization;
import InvoiceOrg.Invoice.Models.DoctorQualification;
import InvoiceOrg.Invoice.Models.ServicesCls;
import InvoiceOrg.Invoice.Models.DoctorAvailability;
import InvoiceOrg.Invoice.Models.DoctorDepartments;
import InvoiceOrg.Invoice.dto.BranchWiseDetailsSlotsDto;
import InvoiceOrg.Invoice.dto.ChartOfAccountsDto;
import InvoiceOrg.Invoice.dto.DoctorAvailabilityDto;
import InvoiceOrg.Invoice.dto.DoctorDayTimings;
import InvoiceOrg.Invoice.dto.DoctorDetailsDtoInf;
import InvoiceOrg.Invoice.dto.DoctorWeekdayTimings;
import InvoiceOrg.Invoice.dto.ScheduledHoursOfDoctorDto;
import InvoiceOrg.Invoice.dto.ServiceDto;
import InvoiceOrg.Invoice.dto.Slot;
import InvoiceOrg.Invoice.dto.TrailsPageDoctors;
import InvoiceOrg.Invoice.dto.TrailsPageSlots;
import InvoiceOrg.Invoice.dto.Week;
import InvoiceOrg.Invoice.dto.WeekSlots;
import net.bytebuddy.asm.Advice.This;

@Service
public class DoctorAvailabilityService {
	
	@Autowired
    private DoctorAvailabilityRepo doctorAvailabilityRepo; 
	
	@Autowired
    private DoctorRepo  doctorRepo ;
	
	@Autowired
    private DepartmentsHybRepo departmentsHybRepo;
	
	@Autowired
    private DoctorDepartmentsRepo doctorDepartmentsRepo; 
	
	@Autowired
    private DoctorQualificationRepo doctorQualificationRepo;
	
	@Autowired
    private ReviewsRepo reviewsRepo;	
	
	@Autowired
	private BranchDoctorRepo branchDoctorRepo;
	

	@Autowired
    private DoctorDetailsRepo doctorDetailsRepo;
	
	@Autowired
	private BranchRepo branchRepo;
	
	@Autowired
	private DateRangesRepo dateRangesRepo;
	
	
	
	String weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	
	//VERIFIED
	public DoctorAvailabilityDto wholeSave(DoctorAvailabilityDto doctorAvailabilityDto) {
		
		int detailsId;
		
		DoctorDetails doctorDetails = new DoctorDetails();
		DoctorDetails exsistDoctorDetails = doctorDetailsRepo.findByDoctorId(doctorAvailabilityDto.getDoctorId());
		if(exsistDoctorDetails == null) {
			doctorDetails.setConsultingFee(doctorAvailabilityDto.getConsultingFee());
			doctorDetails.setFollowupFee(doctorAvailabilityDto.getFollowupFee());
			doctorDetails.setFromDate(doctorAvailabilityDto.getFromDate());
			doctorDetails.setToDate(doctorAvailabilityDto.getToDate());
			//doctorAvailability.setService(doctorAvailabilityDto.getService());
			doctorDetails.setId(doctorAvailabilityDto.getId());
			doctorDetails.setDoctorId(doctorAvailabilityDto.getDoctorId());
			doctorDetails.setConsultingDuration(doctorAvailabilityDto.getConsultingDuration());
			doctorDetails.setVideoConsulting(doctorAvailabilityDto.isVideoConsulting());
			doctorDetails.setBranch_id( doctorAvailabilityDto.getBranchId()   );
			System.out.println(doctorDetails.getDoctorId());
			System.out.println(doctorDetails.getConsultingFee());
			System.out.println(doctorDetails.isVideoConsulting());
			System.out.println(doctorDetails.getId());
			doctorDetails = doctorDetailsRepo.save(doctorDetails);
			detailsId = doctorDetails.getId();
			
			BranchDoctor  branchDoctor = new BranchDoctor();
			branchDoctor.setBranchId(doctorAvailabilityDto.getBranchId());
			branchDoctor.setDoctorId(doctorAvailabilityDto.getDoctorId());
			System.out.println(branchDoctor.getBranchId() +"-"+branchDoctor.getDoctorId());
			branchDoctorRepo.save(branchDoctor);
		}else {
			detailsId = exsistDoctorDetails.getId(); 
		}
		

		
		
		DateRanges dateRanges = new DateRanges();
		dateRanges.setDetailsId(detailsId);
		dateRanges.setFromDate(doctorAvailabilityDto.getFromDate());
		dateRanges.setToDate(doctorAvailabilityDto.getToDate());
		DateRanges dateRangesObj = dateRangesRepo.save(dateRanges);
			 
			     List<Week> list = doctorAvailabilityDto.getWeekdaysTimings();
			   
			     for (Week obj : list) {
			    	for(DoctorAvailability weekdaysTimings : obj.getTimings() ) {
			    		System.out.println(weekdaysTimings.getId()+"id is ");
						weekdaysTimings.setDoctorId(doctorAvailabilityDto.getDoctorId());
						weekdaysTimings.setScheduleStatus(obj.isDoctorScheduleStatus());
						weekdaysTimings.setScheduleDay(obj.getScheduleDay());
						weekdaysTimings.setBranchId(doctorAvailabilityDto.getBranchId());
						weekdaysTimings.setDoctorDetailsId(99);
						weekdaysTimings.setRangeId(dateRangesObj.getId());
						//System.out.println(servicesCls1.getId() +"servicesCls1.getId()");
						doctorAvailabilityRepo.save(weekdaysTimings);		
					 } 
			    }
		return doctorAvailabilityDto    ;
	}
	
	public  HashMap<String,List<Week>>  getTimingsAllBranchesByDocId (DoctorAvailabilityDto doctorAvailability) {
		HashMap<String,List<Week>> mainMap = new HashMap<String,List<Week>>();
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorAvailability.getDoctorId());
		System.out.println(avList.size()+"avList.size()");
		int k = 0;
		while(k < avList.size()) {
			 int g = k;
			 System.out.println(avList.get(g).getBranchId()+"avList.get(g).getBranchId()");
		     List<DoctorAvailability> newSubList =  avList.stream()  
                                              .filter(p -> p.getBranchId() == avList.get(g).getBranchId())
		                                       .collect(Collectors.toList());
		     System.out.println(newSubList.size());
		     k = k + newSubList.size();
		     System.out.println(newSubList.get(0).getBranchId()+"newSubList.get(0).getBranchId()");
		     System.out.println(k+"k");
		   //  System.out.println(newSubList+"newSubList");
		    Branch branchObj =  branchRepo.getById(avList.get(g).getBranchId() );
		     String branch = "Branch"+avList.get(g).getBranchId(); 
		      List<Week> weekTimings = new ArrayList<Week>();
		      weekTimings = this.weekdaysSet(newSubList);
		      
		  // System.out.print(weekTimings.get(0).get); 
		      mainMap.put(branchObj.getName(), weekTimings);
		  }
		
		return mainMap;
	}
	
	
	public List<Week> getByDocIdBranchId(int doctorId, int branchId) {
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimingsByDocIdBranchId(doctorId, branchId); 
		return this.weekdaysSet(avList);
	}
	
	public List<Week> getByDocDetailsId(int doctorDetailsId) {
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimingsByDocDetailsId(doctorDetailsId); 
		return this.weekdaysSet(avList);
	}
	
	public TrailsPageDoctors getAllBranchesSlotsByDocId(int doctorId) { 
		TrailsPageDoctors  trailsPageDoctors = new TrailsPageDoctors(); 
				Doctor doctor = doctorRepo.getById(doctorId) ;
				
				trailsPageDoctors.setDoctorName(doctor.getFirstName()+" "+doctor.getLastName());
				trailsPageDoctors.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()));
				//branchWiseDoctorSlotsDto.setAvgRatingOfDoctor(doctorId);
				trailsPageDoctors.setDoctorId(doctorId);
		
		
				List<DoctorDetails> doctorDetailsList = doctorDetailsRepo.getDoctorDetailsByDocId(doctorId);
				
		for(DoctorDetails doctorDetails : doctorDetailsList) {		
				List<WeekSlots>   weekSlotsList = new ArrayList<WeekSlots>();
				List<DateRanges> dateRangesList = dateRangesRepo.findByDetailsId(doctorDetails.getId());

				List<TrailsPageSlots> trailsPageSlotsList = new ArrayList<TrailsPageSlots>();

				
				
				for(DateRanges dateRanges : dateRangesList) {
					TrailsPageSlots trailsPageSlots = new TrailsPageSlots();
				//	System.out.println(dateRanges.getFromDate()+"dateRanges.getFromDate()");
					trailsPageSlots.setFromDate(dateRanges.getFromDate());
					trailsPageSlots.setToDate(dateRanges.getToDate());

					
					List<DoctorAvailability> avList = doctorAvailabilityRepo.findByRangeId( dateRanges.getId());
					
					 WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(avList),doctorDetails.getConsultingDuration() ,"seperate");

					trailsPageSlots.setListListSlots(weekSlotsTemp.getListListSlots());
					trailsPageSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
					
//System.out.println(trailsPageSlots.getFromDate());
					
					trailsPageSlotsList.add(trailsPageSlots);
				}
				
				trailsPageDoctors.setTrailsPageSlotsList(trailsPageSlotsList);
		}		
			//===============
				
		return trailsPageDoctors;
	}
	
	public TrailsPageDoctors getDetailsSlotsByDocIdBranchId22(int doctorId , int branchId) {
		TrailsPageDoctors  trailsPageDoctors = new TrailsPageDoctors(); 
				Doctor doctor = doctorRepo.getById(doctorId) ;
				
				trailsPageDoctors.setDoctorName(doctor.getFirstName()+" "+doctor.getLastName());
				trailsPageDoctors.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()));
				//branchWiseDoctorSlotsDto.setAvgRatingOfDoctor(doctorId);
				trailsPageDoctors.setDoctorId(doctorId);
		
				DoctorDetails doctorDetails = doctorDetailsRepo.getDoctorDetailsByDocIdBranchId(doctorId,branchId);
				
				
				List<WeekSlots>   weekSlotsList = new ArrayList<WeekSlots>();
				List<DateRanges> dateRangesList = dateRangesRepo.findByDetailsId(doctorDetails.getId());

				List<TrailsPageSlots> trailsPageSlotsList = new ArrayList<TrailsPageSlots>();

				
				
				for(DateRanges dateRanges : dateRangesList) {
					TrailsPageSlots trailsPageSlots = new TrailsPageSlots();
				//	System.out.println(dateRanges.getFromDate()+"dateRanges.getFromDate()");
					trailsPageSlots.setFromDate(dateRanges.getFromDate());
					trailsPageSlots.setToDate(dateRanges.getToDate());

					
					List<DoctorAvailability> avList = doctorAvailabilityRepo.findByRangeId( dateRanges.getId());
					
					 WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(avList),doctorDetails.getConsultingDuration() ,"seperate");

					trailsPageSlots.setListListSlots(weekSlotsTemp.getListListSlots());
					trailsPageSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
					
//System.out.println(trailsPageSlots.getFromDate());
					
					trailsPageSlotsList.add(trailsPageSlots);
				}
				
				trailsPageDoctors.setTrailsPageSlotsList(trailsPageSlotsList);
				
			//===============
				
		return trailsPageDoctors;
	}
	
	public BranchWiseDetailsSlotsDto getDetailsSlotsByDocId(int doctorId) {
		BranchWiseDetailsSlotsDto  branchWiseDoctorSlotsDto = new BranchWiseDetailsSlotsDto(); 
				Doctor doctor = doctorRepo.getById(doctorId) ;
				
				branchWiseDoctorSlotsDto.setDoctorName(doctor.getFirstName()+" "+doctor.getLastName());
				branchWiseDoctorSlotsDto.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()));
				branchWiseDoctorSlotsDto.setAvgRatingOfDoctor(doctorId);
				branchWiseDoctorSlotsDto.setDoctorId(doctorId);
				branchWiseDoctorSlotsDto.setAvgRatingOfDoctor(doctorId);
				branchWiseDoctorSlotsDto.setSelectedWeekDays(null);
		
				List<DoctorDetails> doctorDetailsList = doctorDetailsRepo.getDoctorDetailsByDocId( doctorId);
				
				List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorId);
				
				List<WeekSlots>   weekSlotsList = new ArrayList<WeekSlots>();
				
				//branchWiseDoctorSlotsDto.setDoctorDetailsList(doctorDetailsList) ;
				
				//HashMap<String,List<List<List<Slot>>>> branchWiseSlots = new HashMap<String,List<List<List<Slot>>>>();
				
				for(DoctorDetails doctorDetails : doctorDetailsList) {
					
					WeekSlots weekslotsObj = new WeekSlots();
					 weekslotsObj.setDoctorId(doctorDetails.getDoctorId());
					 weekslotsObj.setDoctorName(doctor.getFirstName());
					 weekslotsObj.setConsultingDuration(doctorDetails.getConsultingDuration());
					 
			           weekslotsObj.setConsultingFee(doctorDetails.getConsultingFee());
			           weekslotsObj.setFollowupFee(doctorDetails.getFollowupFee());
			           Branch branchObj =  branchRepo.getById(doctorDetails.getBranch_id() );
			           weekslotsObj.setBranchName(branchObj.getName());
			           weekslotsObj.setBranchId(branchObj.getId());
			           weekslotsObj.setFromDate(doctorDetails.getFromDate());
			           weekslotsObj.setToDate(doctorDetails.getToDate());
			          
			        //   weekslots.setSelectedWeekDays(null)
						
							     List<DoctorAvailability> newSubList =  avList.stream()  
					                                               .filter(p -> p.getBranchId() == doctorDetails.getBranch_id())
							                                       .collect(Collectors.toList());
							     
							     String branch = "Branch"+doctorDetails.getBranch_id();
							   
							     WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(newSubList),doctorDetails.getConsultingDuration() ,"seperate");
							   
							   
							    weekslotsObj.setListListSlots(weekSlotsTemp.getListListSlots());
							    weekslotsObj.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
							     
							   //  branchWiseSlots.put(branchObj.getName(),weekSlotsTemp.getListListSlots());
							     weekSlotsList.add(weekslotsObj) ; 
							
				}
				branchWiseDoctorSlotsDto.setDetailsSlots(weekSlotsList);
				
				
				
			//===============
				
		return branchWiseDoctorSlotsDto;
//		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
//		List<WeekSlots>      weekSlotsList = new ArrayList<WeekSlots>();
//		
//			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//			WeekSlots weekSlots = new WeekSlots();
//			
//			
//		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
//			
//			
//			
//			for(DoctorDetails doctorDetails : serviceList){
//			weekSlots.setDoctorName(doctor.getFirstName()+" "+doctor.getLastName() );
//			weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()));
//			weekSlots.setConsultingFee(doctorDetails.getConsultingFee());
//			weekSlots.setFollowupFee(doctorDetails.getFollowupFee());
//			weekSlots.setDoctorId(doctorDetails.getDoctorId());
//			weekSlots.setConsultingDuration(doctorDetails.getConsultingDuration());
//			weekSlots.setVideoConsulting(doctorDetails.isVideoConsulting()); 
//			weekSlots.setFromDate(doctorDetails.getFromDate());
//			weekSlots.setToDate(doctorDetails.getToDate());
//			
//			
//			weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctor.getId()));  
//
//            if(reviewsRepo.avgRatingOfDoctor(doctor.getId()) != null){
//            		weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctor.getId()));
//            }
//			
//			
//			weekSlots.setVideoConsulting(doctorDetails.isVideoConsulting());
//			
//								int k=0;
//									while(k < avList.size()) {
//										 int g = k;
//									     List<DoctorAvailability> newSubList =  avList.stream()  
//							                                               .filter(p -> p.getDoctorId() == avList.get(g).getDoctorId())
//									                                       .collect(Collectors.toList());
//									     k = k + newSubList.size();
//									     String doc = "Doctor"+avList.get(g).getDoctorId();
//									    //  List<WeekSlots> weekSlots = new ArrayList<WeekSlots>();
//									     
//									     System.out.println("newSubList.size()"+newSubList.size());
//									     
//									    // weekSlots = this.weekdaysSet(newSubList);
//									     
//									     WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(newSubList),weekSlots.getConsultingDuration() ,"seperate");
//									   
//									     //finalSubList.put(doc, weekSlots);
//									     weekSlots.setListListSlots(weekSlotsTemp.getListListSlots());
//									     weekSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
//									  }
//			//clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//			//doctorAvailabilityDtoList.add(clsObj);
//			
//									weekSlotsList.add(weekSlots);
//			}
//		//clsObj.setId(service.getId());
//		
//		return  weekSlotsList;
//		
//			//return setSlotsOptions(doctorAvailabilityDtoList,"combine");
	}
	
	public List<DoctorAvailabilityDto> getDoctorDetailsByDoctorId(int doctorId){
		
		 List<DoctorAvailabilityDto> doctorAvailabilityList = new ArrayList<DoctorAvailabilityDto>();
		 
		
		
		//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorId);
		//clsObj.setQualification(physicianQualification.getQualification() );
		
		List<DoctorDetails> serviceList =  doctorDetailsRepo.getDoctorDetailsByDocId(doctorId);
		for(DoctorDetails doctorDetails : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			
			Doctor doctor = doctorRepo.getById(doctorId) ;  
			clsObj.setDoctorFirstName(doctor.getFirstName());
			clsObj.setDoctorLastName(doctor.getLastName());
			clsObj.setImageStng("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctor.getImage()));
			
				//clsObj.setDepartmentId(service.getDepartmentId());
				clsObj.setConsultingFee(doctorDetails.getConsultingFee());
				clsObj.setFollowupFee(doctorDetails.getFollowupFee());
				clsObj.setDoctorId(doctorDetails.getDoctorId());
				clsObj.setConsultingDuration(doctorDetails.getConsultingDuration());
				clsObj.setFromDate(doctorDetails.getFromDate());
				clsObj.setToDate(doctorDetails.getToDate());
				clsObj.setVideoConsulting(doctorDetails.isVideoConsulting());
				
		//		Departments dep = departmentsHybRepo.getById(service.getDepartmentId());
		//		clsObj.setDepartmentName(dep.getName());
				
				List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( doctorDetails.getDoctorId());
				clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
				
				doctorAvailabilityList.add(clsObj);
		}
		return doctorAvailabilityList;
	}


	//getAllDetailsSlotsByDocDetailsId before method
	public List<WeekSlots> getAllDoctorsDetailsByDepIdBranchIdSlots(int departmentId, int branchId) {
		
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<WeekSlots>  weekSlotsList  = new ArrayList<WeekSlots>();
		
		//List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		
		List<DoctorDetailsDtoInf>   doctorDetailsDtoInfList    = doctorDetailsRepo.getAllDoctorsDetailsByDepIdBranchIdSlots(departmentId, branchId);
		
		for(DoctorDetailsDtoInf doctorDetails  : doctorDetailsDtoInfList) {
	

//			clsObj.setDoctorFirstName(doctorDetails.getFirstName());
//			clsObj.setDoctorLastName(doctorDetails.getLastName());
//			clsObj.setImage(doctorDetails.getImage());
//			//clsObj.setDepartmentId(service.getDepartmentId());
//			clsObj.setConsultingFee(doctorDetails.getConsultingFee());
//			clsObj.setFollowupFee(doctorDetails.getFollowupFee());
//			clsObj.setDoctorId(doctorDetails.getDoctorId());
//			clsObj.setConsultingDuration(doctorDetails.getConsultingDuration());
//			clsObj.setFromDate(doctorDetails.getFromDate());
//			clsObj.setToDate(doctorDetails.getToDate());
//			//clsObj.setService(service.getService());
//			clsObj.setQualification(doctorQualificationRepo.findByDoctorId(doctorDetails.getDoctorId()) );
//			clsObj.setVideoConsulting(doctorDetails.getIsVideoConsulting());
//			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings(doctorDetails.getDoctorId());
//			clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//			doctorAvailabilityDtoList.add(clsObj);
			
			//===========================================
			WeekSlots weekSlots = new WeekSlots();
			//Doctor doctor = doctorRepo.getById(doctorId) ;  
			
		//	DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
		//	DoctorDetails service =  doctorDetailsRepo.getDoctorDetailsByDepId( doctorId);
			weekSlots.setDoctorName(doctorDetails.getFirstName()+" "+doctorDetails.getLastName() );
			weekSlots.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorDetails.getImage()));
			weekSlots.setConsultingFee(doctorDetails.getConsultingFee());
			weekSlots.setFollowupFee(doctorDetails.getFollowupFee());
			weekSlots.setDoctorId(doctorDetails.getDoctorId());
			weekSlots.setConsultingDuration(doctorDetails.getConsultingDuration());
			weekSlots.setVideoConsulting(doctorDetails.getIsVideoConsulting()); 
			weekSlots.setFromDate(doctorDetails.getFromDate());
			weekSlots.setToDate(doctorDetails.getToDate());
			
			
			weekSlots.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDetails.getDoctorId()));  

            if(reviewsRepo.avgRatingOfDoctor(doctorDetails.getDoctorId()) != null){
            		weekSlots.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorDetails.getDoctorId()));
            }
			
			
			weekSlots.setVideoConsulting(doctorDetails.getIsVideoConsulting());
			//List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( doctorDetails.getDoctorId());
			
			List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimingsByDocIdBranchId( doctorDetails.getDoctorId(),branchId);
			
//								int k=0;
//									while(k < avList.size()) {
//										 System.out.println("step 1 avList.size()"+avList.size());
//										 int g = k;
//									     List<DoctorAvailability> newSubList =  avList.stream()  
//							                                               .filter(p -> p.getBranchId() == avList.get(g).getBranchId())
//									                                       .collect(Collectors.toList());
//									     k = k + newSubList.size();
//									     System.out.println("step 2 newSubList.size()"+newSubList.size());
//									     String doc = "Doctor"+avList.get(g).getDoctorId();
//									    //  List<WeekSlots> weekSlots = new ArrayList<WeekSlots>();
//									     
//									     for (DoctorAvailability d  : newSubList) {
//									    	 System.out.println(d.getScheduleDay()+"d.getScheduleDay()");
//									    	 System.out.println(d.getScheduleEndTime()+"d.getScheduleEndTime()");
//											
//										}
//									     
//									    // weekSlots = this.weekdaysSet(newSubList);
//									     
//									     WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(newSubList),weekSlots.getConsultingDuration() ,"seperate");
//									   
//									     //finalSubList.put(doc, weekSlots);
//									     weekSlots.setListListSlots(weekSlotsTemp.getListListSlots());
//									     weekSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
//									  }
		
									 WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(avList),weekSlots.getConsultingDuration() ,"seperate");
									   
								    
								     weekSlots.setListListSlots(weekSlotsTemp.getListListSlots());
								     weekSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
			
									weekSlotsList.add(weekSlots);
			
									weekSlotsList.add(weekSlots);
			
			
			
			
			
			
		}
		//i = i+7;
		return weekSlotsList;
	}
	
	
public List<TrailsPageDoctors> getAllDetailsSlotsByDocDetailsId(int departmentId, int branchId) {
		
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<WeekSlots>  weekSlotsList  = new ArrayList<WeekSlots>();
List<TrailsPageDoctors> trailsPageDoctorsList = new ArrayList<TrailsPageDoctors>();
		
		//List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		
		List<DoctorDetailsDtoInf>   doctorDetailsDtoInfList    = doctorDetailsRepo.getAllDoctorsDetailsByDepIdBranchIdSlots(departmentId, branchId);
		
		int i = 0;
		
		
		
		for(DoctorDetailsDtoInf doctorDetails  : doctorDetailsDtoInfList) {
					System.out.println(doctorDetails.getDetailsId()+"doctorDetails.getDetailsId()");
					System.out.println(i+"i");
					i = i + 1;
					
					List<TrailsPageSlots> trailsPageSlotsList = new ArrayList<TrailsPageSlots>();

					TrailsPageDoctors trailsPageDoctors = new TrailsPageDoctors();
						trailsPageDoctors.setDoctorName(doctorDetails.getFirstName()+" "+doctorDetails.getLastName() );
						trailsPageDoctors.setDoctorId(doctorDetails.getDoctorId());
						trailsPageDoctors.setImage("data:image/png;base64,"+Base64.getEncoder().encodeToString(doctorDetails.getImage()));
			//weekSlots.setConsultingDuration(doctorDetails.getConsultingDuration());
						List<DateRanges> dateRangesList = dateRangesRepo.findByDetailsId(doctorDetails.getDetailsId());
						//System.out.println(dateRangesList.size()+"dateRangesList");
						for(DateRanges dateRanges : dateRangesList) {
							TrailsPageSlots trailsPageSlots = new TrailsPageSlots();
						//	System.out.println(dateRanges.getFromDate()+"dateRanges.getFromDate()");
							trailsPageSlots.setFromDate(dateRanges.getFromDate());
							trailsPageSlots.setToDate(dateRanges.getToDate());

							
							List<DoctorAvailability> avList = doctorAvailabilityRepo.findByRangeId( dateRanges.getId());
							
							 WeekSlots weekSlotsTemp = setSlotsOptions(this.weekdaysSet(avList),doctorDetails.getConsultingDuration() ,"seperate");

							trailsPageSlots.setListListSlots(weekSlotsTemp.getListListSlots());
							trailsPageSlots.setSelectedWeekDays(weekSlotsTemp.getSelectedWeekDays());
							
 //System.out.println(trailsPageSlots.getFromDate());
							
							trailsPageSlotsList.add(trailsPageSlots);
						}
						
						 if(reviewsRepo.avgRatingOfDoctor(doctorDetails.getDoctorId()) != null){
							 trailsPageDoctors.setAvgRatingOfDoctor(reviewsRepo.avgRatingOfDoctor(doctorDetails.getDoctorId()));
			            }
			    
						trailsPageDoctors.setTrailsPageSlotsList(trailsPageSlotsList);
						trailsPageDoctorsList.add(trailsPageDoctors)	;
		}
		//i = i+7;
		return trailsPageDoctorsList;
	}
	
	
	
	//===========================================================================
	
	public DoctorDetails insert(DoctorDetails doctorDetails) {
		//doctor.setPhNumber(  doctor.getPhNumber().toString());
		return doctorDetailsRepo.save(doctorDetails);
	}
	
	
	
	public List<DoctorDetails> get() {
		return doctorDetailsRepo.findAll();
	}
	
	


	
	
	public List<DoctorAvailabilityDto> getAll(){
        List<DoctorAvailabilityDto> clsObjList = new ArrayList<DoctorAvailabilityDto>();
	    
		List<DoctorDetails>  serviceList =  doctorDetailsRepo.findAll();
		for(DoctorDetails service : serviceList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
		clsObj.setId(service.getId());
	//clsObj.setDepartmentId(service.getDepartmentId());
	
	Doctor docObj = doctorRepo.getById(service.getDoctorId());
	clsObj.setDoctorFirstName(docObj.getFirstName());
		//System.out.println(departmentsHybRepo.getById(service.getDepartmentId()));
	//	clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()));======================
		clsObj.setConsultingFee(service.getConsultingFee());
		clsObj.setFollowupFee(service.getFollowupFee());
		//clsObj.setBusinessHours(service.getBusinessHours());
		clsObj.setDoctorId(service.getDoctorId());
		clsObj.setConsultingDuration(service.getConsultingDuration());
//		System.out.print(service.getFromDate());
//		System.out.print(service.getToDate());
		clsObj.setFromDate(service.getFromDate());
		clsObj.setToDate(service.getToDate());
		//clsObj.setService(service.getService());
		clsObj.setVideoConsulting(service.isVideoConsulting());
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( service.getDoctorId());
	 System.out.println( service.getId()+" service.getId()");
		//	prblem comments
		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
		//clsObj.setDepartmentName(departmentsHybRepo.getById(service.getDepartmentId()).getName());
		
		 clsObjList.add(clsObj);
		}
		return clsObjList;
		
	}
	
	List<Week>  weekdaysSet(List<DoctorAvailability> availabitityList){
		
		  List<Week> weekdaysTimings = new ArrayList<Week>();
		
		  for(int i=0; i<7 ; i++) {
			  Week week = new Week();
			 // System.out.println(weekdays[i]);
			//  System.out.println(availabitityList.size()+"availabitityList.size()");
			  List<DoctorAvailability> avList = this.filterMethod(weekdays[i], availabitityList);
			  if(avList.size() > 0) {
				//  System.out.println(avList.size()+ "avList.size()");
 for(DoctorAvailability a : avList) {
	//  a.getScheduleEndTime(); hh:mm a
	// System.out.println(a.getScheduleEndTime()+"a.getScheduleEndTime()");
	// System.out.println(a.getScheduleStartTime()+"a.getScheduleStartTime()");
//	 System.out.println(a.getScheduleDay()+"a.getScheduleDay()");
	  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a");
	  
	  LocalTime today =  a.getScheduleEndTime();
	   
	  String timeString = today.format(formatter);
	//  System.out.println("converted time is "+timeString);
 }
				  week.setTimings(avList);
				  DoctorAvailability doc = avList.get(0);
			   	  week.setDoctorScheduleStatus(doc.isScheduleStatus());
			   
				  week.setScheduleDay(weekdays[i]);
				  weekdaysTimings.add(week);
			  }else {
				  System.out.println(avList.size()+ "avList.size()");

//				  String input = "10:00:00";
//				  OffsetTime time = OffsetTime.parse(input);
//				  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");
//				  String result = formatter.format(time);
//				  System.out.println(result);
				  List<DoctorAvailability> emptyList = new ArrayList<DoctorAvailability>();
				  DoctorAvailability doctorAvailability = new DoctorAvailability();
				  emptyList.add(doctorAvailability);
				  doctorAvailability.setBranchId(0);
				  doctorAvailability.setDoctorId(0);
				  doctorAvailability.setId(0);
				  doctorAvailability.setScheduleDay(weekdays[i]);
				  doctorAvailability.setScheduleEndTime(null);
				  doctorAvailability.setScheduleStartTime(null);
				  doctorAvailability.setScheduleStatus(false);
				  week.setTimings(emptyList);
			   	  week.setDoctorScheduleStatus(false);
				  week.setScheduleDay(weekdays[i]);
				  weekdaysTimings.add(week); 
			  }
			 
		  }
		

		return weekdaysTimings;
		
	}
	
	List<DoctorAvailability> filterMethod(String weekday , List<DoctorAvailability> availabitityList){
		return  availabitityList.stream()
			      .filter(day -> day.getScheduleDay().equals(weekday))
			      .collect(Collectors.toList());
	}
	
	
//	public DoctorAvailabilityDto getDoctorDetailsByDepId(DoctorAvailabilityDto doctorAvailability) {
//		System.out.println(doctorAvailability.getDoctorId()+"  "+doctorAvailability.getDepartmentId());
//		DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
//		
//		
//		Doctor docObj = doctorRepo.getById(doctorAvailability.getDoctorId());
//		clsObj.setDoctorFirstName(docObj.getFirstName());
//		clsObj.setDoctorLastName(docObj.getLastName());
//		
//		DoctorDetails service =  doctorAvailabilityRepo.getDoctorDetailsByDepId( doctorAvailability.getDoctorId());
//		//clsObj.setId(service.getId());
//		//clsObj.setDepartmentId(service.getDepartmentId());
//		clsObj.setConsultingFee(service.getConsultingFee());
//		clsObj.setFollowupFee(service.getFollowupFee());
//		clsObj.setDoctorId(service.getDoctorId());
//		clsObj.setConsultingDuration(service.getConsultingDuration());
//		clsObj.setFromDate(service.getFromDate());
//		clsObj.setToDate(service.getToDate());
//		//clsObj.setService(service.getService());
//		clsObj.setVideoConsulting(service.isVideoConsulting());
//		System.out.println(doctorAvailability.getId());
//		
//		
//		List<DoctorAvailability> avList = weekdaysTimingsHybRepo.getWeekdaysTimings(service.getDoctorId());
//		clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
//		
//		return clsObj; 
//	}
	
	
	
	
	
	
	
	
	// might be usefull
	public HashMap<String,HashMap<String,List<WeekSlots>>> getAllDoctorsDetailsByDepIdAllBranchsSlots(int departmentId){
		int i = 1;
	//	System.out.println(departmentId);
		
		List<DoctorAvailability> avList = doctorAvailabilityRepo.getTimingsByDepId(departmentId);
	//	System.out.println("size of overall list " +avList.size());
		
		HashMap<String,HashMap<String,List<WeekSlots>>>  mainList =  new HashMap<String,HashMap<String,List<WeekSlots>>>();
		
		  while(i < avList.size()) {
			  int j = i;
			//  System.out.println(avList.get(j).getBranchId()+"avList.get(j).getBranchId()");
		   List<DoctorAvailability> newList =  avList.stream()  
                                               .filter(p -> p.getBranchId() == avList.get(j).getBranchId())
		                                       .collect(Collectors.toList());
		   HashMap<String,List<WeekSlots>> finalSubList =  new HashMap<String,List<WeekSlots>>();
		                   int k = 0;
						   while(k < newList.size()) {
								 int g = k;
							     List<DoctorAvailability> newSubList =  newList.stream()  
					                                               .filter(p -> p.getDoctorId() == newList.get(g).getDoctorId())
							                                       .collect(Collectors.toList());
							     k = k + newSubList.size();
							     String doc = "Doctor"+newList.get(g).getDoctorId();
							      List<WeekSlots> weekSlots = new ArrayList<WeekSlots>();
							    // weekSlots = this.weekdaysSet(newSubList);
							   
							     finalSubList.put(doc, weekSlots);
							  }
		     i = i+newList.size();
		  //   System.out.println("i "+i);
		  
		     String u = "Branch"+avList.get(j).getBranchId();
		     mainList.put(u, finalSubList);
		  }
		  
		return mainList;
		
	}
	
	public List<DoctorAvailabilityDto> getAllDoctorsDetailsByDepId(int departmentId) {
		List<DoctorAvailabilityDto> doctorAvailabilityDtoList = new ArrayList<DoctorAvailabilityDto>();
		
		List<DoctorDepartments>  docsList = doctorDepartmentsRepo.getByDepartmentId(departmentId);
		for(DoctorDepartments doctorDepartments  : docsList) {
			DoctorAvailabilityDto clsObj = new DoctorAvailabilityDto();
			 
			Doctor doctor = doctorRepo.getById(doctorDepartments.getDoctorId()) ;  
			
			//DoctorQualification physicianQualification = physicianQualificationRepo.getByPhysicianId(doctorDepartments.getDoctorId());
			
			List<DoctorDetails> serviceList =  doctorDetailsRepo.getDoctorDetailsByDocId( doctorDepartments.getDoctorId());
			for(DoctorDetails doctorDetails : serviceList) {
					clsObj.setDoctorFirstName(doctor.getFirstName());
					clsObj.setDoctorLastName(doctor.getLastName());
					//clsObj.setDepartmentId(service.getDepartmentId());
					clsObj.setConsultingFee(doctorDetails.getConsultingFee());
					clsObj.setFollowupFee(doctorDetails.getFollowupFee());
					clsObj.setDoctorId(doctorDetails.getDoctorId());
					clsObj.setConsultingDuration(doctorDetails.getConsultingDuration());
					clsObj.setFromDate(doctorDetails.getFromDate());
					clsObj.setToDate(doctorDetails.getToDate());
					//clsObj.setService(service.getService());
					//clsObj.setQualification(physicianQualification.getQualification() );
					clsObj.setVideoConsulting(doctorDetails.isVideoConsulting());
					List<DoctorAvailability> avList = doctorAvailabilityRepo.getWeekdaysTimings( doctorDetails.getDoctorId());
					clsObj.setWeekdaysTimings(this.weekdaysSet(avList));
					clsObj.setReviewsCount(reviewsRepo.getReviewsCountByDoctorId(doctorDepartments.getDoctorId()));  
					doctorAvailabilityDtoList.add(clsObj);
			}
		}
		
		//clsObj.setId(service.getId());
		
		return doctorAvailabilityDtoList;
	}
	
	public ScheduledHoursOfDoctorDto getScheduledHours(int doctorId) {
		
		ScheduledHoursOfDoctorDto scheduledHours = new ScheduledHoursOfDoctorDto();
		scheduledHours.setDoctorId(doctorId);
		
		String  weekdays[]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		List<DoctorWeekdayTimings> doctorWeekdayTimingsList = new ArrayList<DoctorWeekdayTimings>(); 
		for(int i= 0 ; i<=6; i++) {
			
			DoctorWeekdayTimings doctorWeekdayTimings = new DoctorWeekdayTimings();
			
			List<DoctorDayTimings>	doctorDayTimings  = doctorAvailabilityRepo.getTimingsByDoctorId(doctorId,weekdays[i]);
			
			//System.out.println();
			
			
			 doctorWeekdayTimings.setDoctorDayTimings(doctorDayTimings);
			  doctorWeekdayTimingsList.add(doctorWeekdayTimings);
			
		}
		
		scheduledHours.setDoctorWeekdayTimings(doctorWeekdayTimingsList);
		
		return scheduledHours;	
	}
	
	public WeekSlots setSlotsOptions( List<Week> weekdaysTimings ,Double consultingDuration,  String type ) {
		List<List<Slot>> slotsArry = new ArrayList<List<Slot>>();
		List<WeekSlots> doctorTimeSolts = new ArrayList<WeekSlots>();  
	    // this.doctorAvailabilityData = response3
	    		 // each loop represents each docotr details and timing
	    		                                      // for(int f=0 ; f< doctorAvailabilityData.size(); f++){
	    		                                    	   
	    		                                    	   WeekSlots weekSlots = new WeekSlots();
	    		                                    	   
	    		                                    	   List<List<Slot>> weekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> evngweekTimeSlotsOptions = new ArrayList<List<Slot>>();
	    		                                    	   List<List<Slot>> mrngweekTimeSlotsOptions = new ArrayList<List<Slot>>();//this.weekTimeSlotsOptions = []
	    		                                    	   Map<String,List<Slot>> mrngweekTimeSlotsOptionsMap = new HashMap<String,List<Slot>>();
	    		                                        		  
	    		                                           List<Week> weekdays =  weekdaysTimings;

	    		                                           double slotDuration =  consultingDuration;
	    		                                         
	    		                                           int a[]=new int[7];
	    		                                           List<Integer> selectedWeekDays = new ArrayList<Integer>();   
	    		                                           // each loop represents each DAY OF WEEK
	    		                                           for(int i=0; i< weekdays.size() ; i++){
	    		                                        	       
	    		                                                   if ( weekdays.get(i).isDoctorScheduleStatus() == true){
	    		                                                	   System.out.println(weekdays.get(i).getScheduleDay()+"weekdays.get(i).getScheduleDay()");
	    		                                                      List<Slot> timeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> evngtimeStops = new ArrayList<Slot>();
	    		                                                      List<Slot> mrngtimeStops = new ArrayList<Slot>();
	    		                                                      
	    		                                                        // this for loop runs a doctor has multiple and different timings
	    		                                                      for(int z=0; z < weekdays.get(i).getTimings().size(); z++){
	    		                                                    	 
		    		                                                    	  Long duration = (long) slotDuration;
		    		                                                    	  LocalTime endTime = weekdays.get(i).getTimings().get(z).getScheduleEndTime().minusMinutes(duration);
		    		                                                    	  LocalTime startTime = weekdays.get(i).getTimings().get(z).getScheduleStartTime();
	    		                                                        
	    		                                                             // compare starttime and endtime if to proceed or terminate
		    		                                                          while(startTime.compareTo(endTime) <= 0){
	//	    		                                                        	 
		    		                                                          Slot slot = new Slot();
		    		                                                          slot.setBooked(null);
		    		                                                          slot.setSelected(false);
		    		                                                      
		    		                                                          LocalTime time = LocalTime.parse(startTime.toString(), DateTimeFormatter.ofPattern("HH:mm"));
		    		                                                          String formattedTime = time.format(DateTimeFormatter.ofPattern("hh:mm a"));
		    		                                                          slot.setValue(formattedTime);
		    		      
		    		                                                         //push each slot into array
		    		                                                          LocalTime comareTime  = LocalTime.parse("16:00:00");
		    		                                                          
		    		                                                          if(type.equals("seperate")) {  
			    		                                                          if(startTime.compareTo(comareTime) >=0) {
			    		                                                        	//  System.out.println("evng  "+slot.getValue());
			    		                                                        	  evngtimeStops.add(slot);
			    		                                                          }else {
			    		                                                        	  mrngtimeStops.add(slot);
			    		                                                          }
		    		                                                          }else {
		    		                                                              timeStops.add(slot);
		    		                                                          }
		    		                                                             
		    		                                                        
		    		                                                                  // add duration to starttime to get next slot
		    		                                                                    startTime = startTime.plusMinutes(duration);
		    		                                                        } 
	    		                                                      }
		    		                                                   // push one day slots into aray --- total 7 days
		    		                                                      slotsArry.add(timeStops);
		    		                                                      if(type.equals("combine")) {  
		    		                                                    	  weekTimeSlotsOptions.add(timeStops);	
		    		                                                      }else {
			    		                                                      evngweekTimeSlotsOptions.add(evngtimeStops);
			    		                                                      mrngweekTimeSlotsOptions.add(mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("values",mrngtimeStops);
			    		                                                      mrngweekTimeSlotsOptionsMap.put("showMore",mrngtimeStops);
		    		                                                      }
	    		                                                    
	    		                                                   }else {
																		   List<Slot> timeStops = new ArrayList<Slot>();
																	       slotsArry.add(timeStops);
																	       weekTimeSlotsOptions.add(timeStops); 
																	       evngweekTimeSlotsOptions.add(timeStops);
																	       mrngweekTimeSlotsOptions.add(timeStops);
																	       
																	       selectedWeekDays.add(i);
	    		                                                   }
	    		                                       }
	    		                                           
	    		                                         weekSlots.setSelectedWeekDays(selectedWeekDays); 
	    		                                       // push one week slots of a doctor(each doctor)
	    		                                           HashMap<String, List<List<Slot>>> hash_map = new HashMap<String, List<List<Slot>>>();
	    		                                           hash_map.put("Morning",mrngweekTimeSlotsOptions);
	    		                                           hash_map.put("Evning",evngweekTimeSlotsOptions);
	    		                                           List<List<List<Slot>>> listListSlots = new ArrayList<List<List<Slot>>>();
	    		                                           if(type.equals("combine")) {  
	    		                                        	   System.out.println("combine");
	    		                                        	   listListSlots.add(weekTimeSlotsOptions);
	    		                                           }else {
	    		                                           listListSlots.add(mrngweekTimeSlotsOptions);
	    		                                           listListSlots.add(evngweekTimeSlotsOptions);
	    		                                           }
	    		                                           
	    		                                           List<Map<String,List<Slot>>> listListSlots2 = new ArrayList<Map<String,List<Slot>>>();  
	    		                                           listListSlots2.add(mrngweekTimeSlotsOptionsMap);
	    		                                           
//	    		                                
	    		                            
	    		                                       
	    		                                       
	    		                                       weekSlots.setListListSlots(listListSlots);
	    		                                  
	    		                                      
	    		                                       
	    		                                           doctorTimeSolts.add(weekSlots);
	    		                                    //  }
	     
	     
		return weekSlots;
		
	}
	
	public void deleteRows(List<DoctorAvailability>  doctorAvailabilityList) {
		for(DoctorAvailability da : doctorAvailabilityList) {
			doctorAvailabilityRepo.deleteById(da.getId());
		}
		
	}
	
	

}
